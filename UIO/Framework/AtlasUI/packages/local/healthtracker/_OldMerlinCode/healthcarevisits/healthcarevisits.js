/*
 * File: app/view/healthtracker/healthcarevisits.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Atlas.common.view.healthcarevisits.healthcarevisits', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.healthtrackerhealthcarevisits',

    requires: [
        'Atlas.common.view.healthcarevisits.healthcarevisitsViewModel',
        'Ext.selection.CellModel',
        'Ext.ux.CheckColumn'
    ],

    viewModel: {
        type: 'healthtrackerhealthcarevisits'
    },
    reference: 'health',
    height: 400,
    hidden: true,
    id: 'healthtrackerhealthcarevisits',
    itemId: 'healthtrackerhealthcarevisits',
    title: 'Healthcare Visits',
    titleAlign: 'center',
    defaultListenerScope: true,

    listeners: {
        afterrender: 'onHealthtrackerhealthcarevisitsAfterRender'
    },

    onHealthtrackerhealthcarevisitsAfterRender: function(component, eOpts) {
        var vHealthCareVisitsURL = meridianportal.utility.Config.getRestURL() +
            meridianportal.utility.Config.getMemberAdapter() + "gethealthtrackerdata";
        //declaring variable for store
        var store = Ext.getStore('healthtracker.healthcarevisits');
        //setting up AJAX request for loading the grid
        //var getDataObject = '{"request":{"pSessionID":"9f63f619-2463-8fb5-f813-b29de8e868a6","pRecipientID":"964","pSectionID":"1"}}';
        var getDataObject = '{"request":{"pSessionID":' + '"' + meridianportal.utility.user.getSessionID() + '"' + ',"pRecipientID":' + '"' +
            meridianportal.utility.user.getSelectedRecipientID() + '"' + ',"pSectionID":"1"}}';

        Ext.Ajax.request ({
            url: vHealthCareVisitsURL,
            method: 'PUT',
            contentType: "application/json; charset=utf-8",
            useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
            jsonData: getDataObject,
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                store.loadData(obj.response.ttHndl.ttHealthCareVisit);
            },
            failure: function(response, opts) {
                //console.log('server-side failure with status code ' + response.statusText);
                Ext.Msg.alert('Error','An error occurred while reading the Visit record.\nError Code:' + response.status + '&nbsp;');
            }
        });

        var vReasonForVisitURL = meridianportal.utility.Config.getRestURL() +
            meridianportal.utility.Config.getPortalSecurityAdapter() + "getlistitemstable?pListName=ReasonForVisit";

        var vResultOfVisitURL = meridianportal.utility.Config.getRestURL() +
            meridianportal.utility.Config.getPortalSecurityAdapter() + "getlistitemstable?pListName=ResultOfVisit";

        var rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {
            //clicksToEdit: 1
        });
        //array to hold reason for visit-no dups
        var ReasonForVisitArray = [];
        //array to hold provider-no dups
        var ProviderArray = [];
        //stores distinct both user entered and pre-defined reason for visit
        var aggregatedReasonForVisitStore = new Ext.data.ArrayStore({
            data: ReasonForVisitArray,
            fields: ['reasonForVisitDescription']
        });
        //stores distinct user entered provider
        var providerStore = new Ext.data.ArrayStore({
            data: ProviderArray,
            fields: ['userEnteredProvider']
        });

        var reasonForVisitPredefinedStore = new Ext.data.Store({
            autoLoad: true,
            fields: [
                //{name: 'listitem'},
                {name: 'listDescription'}
            ],
            proxy: {
                type: 'ajax',
                url: vReasonForVisitURL,
                useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
                reader: {
                    type: 'json',
                    root: 'response.dsListItems.listItems'
                }
            }
        });

        var userInputStore = new Ext.data.Store({
            autoLoad: true,
            fields: [
                //{name: 'RecipientID'},
                //{name: 'SectionID'},
                //{name: 'SeqNum'},
                //{name: 'dateOfVisit'},
                {name: 'reasonforVisit'},
                {name: 'provider'}
                //{name: 'resultOfVisit'},
                //{name: 'newPrescription'},
                //{name: 'notes'},
                //{name: 'markDelete'}
            ]//,
            // proxy: {
            //     type: 'ajax',
            //     url: vHealthCareVisitsURL,
            //     useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
            //     reader: {
            //          type: 'json',
            //         record: 'response.ttMemberHealthTrackerData.ttMemberHealthTrackerData'
            //    }
            //}
        });

        Ext.Ajax.request ({
            url: vHealthCareVisitsURL,
            method: 'PUT',
            contentType: "application/json; charset=utf-8",
            useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
            jsonData: getDataObject,
            success: function(response, opts) {
                var obj = Ext.decode(response.responseText);
                userInputStore.loadData(obj.response.ttHndl.ttHealthCareVisit);
                //userInputStore is same as grid store; however loops thru both reasonForVisit and provider to eliminate dups
                userInputStore.each(function(record){
                    var reasonForVisitRec = record.get('reasonforVisit');
                    var reasonForVisitFound = false;
                    for (i = 0; i < ReasonForVisitArray.length; i++){
                        if (ReasonForVisitArray[i] == reasonForVisitRec){
                            reasonForVisitFound = true;
                        }
                    }
                    if (!reasonForVisitFound){
                        var rfvrecordArray = [record.get('reasonforVisit')];
                        ReasonForVisitArray.push(rfvrecordArray);
                    }
                    var providerRec = record.get('provider');
                    var providerFound = false;
                    for (i = 0; i < ProviderArray.length; i++){
                        if (ProviderArray[i] == providerRec){
                            providerFound = true;
                        }
                    }
                    if (!providerFound){
                        var providerRecordArray = [providerRec];
                        ProviderArray [ProviderArray.length ] = providerRecordArray;
                    }
                });

            },
            failure: function(response, opts) {
                //console.log('server-side failure with status code ' + response.statusText);
                Ext.Msg.alert('Error','An error occurred while reading the Visit record.\nError Code:' + response.status + '&nbsp;');
            }
        });
        /*
        //userInputStore is same as grid store; however loops thru both reasonForVisit and provider to eliminate dups
        userInputStore.on('load',function(store,records,opts){
            userInputStore.each(function(record){
                var reasonForVisitRec = record.get('reasonforVisit');
                var reasonForVisitFound = false;
                for (i = 0; i < ReasonForVisitArray.length; i++){
                    if (ReasonForVisitArray[i] == reasonForVisitRec){
                        reasonForVisitFound = true;
                    }
                }
                if (!reasonForVisitFound){
                    var rfvrecordArray = [record.get('reasonforVisit')];
                    ReasonForVisitArray.push(rfvrecordArray);
                }
                var providerRec = record.get('provider');
                var providerFound = false;
                for (i = 0; i < ProviderArray.length; i++){
                    if (ProviderArray[i] == providerRec){
                        providerFound = true;
                    }
                }
                if (!providerFound){
                    var providerRecordArray = [providerRec];
                    ProviderArray [ProviderArray.length ] = providerRecordArray;
                }
            });
        });
        */
        //loading standard reason for visit
        reasonForVisitPredefinedStore.on('load', function(store, records, opts){
            reasonForVisitPredefinedStore.each(function(record){
                var rfvrecordArray = [
                    record.get('listDescription')
                ];
                ReasonForVisitArray.push(rfvrecordArray);
            });
        });
        //setting up the Health care visits grid
        var grid = Ext.create('Ext.grid.Panel', {
            renderTo: 'editor-grid',
            height: 400,
            title: 'Healthcare Visits',
            store: store,
            columns: [{
                //id: 'recipientID',
                hidden: true,
                dataIndex: 'recipientID'
            },{
                //id: 'sectionID',
                hidden: true,
                dataIndex: 'sectionID'
            },{
                //id: 'seqNum',
                hidden: true,
                dataIndex: 'seqNum'
            },{
                //id: 'markDelete',
                hidden: true,
                dataIndex: 'markDelete'
            },{
                //id: 'dateOfVisit',
                header: 'Date of Visit',
                dataIndex: 'dateOfVisit',
                xtype: 'datecolumn',
                menuDisabled: true,
                width: 100,
                editor: {
                    xtype: 'datefield',
                    format: 'm/d/Y'
                    //minValue: '01/01/2014',
                    //maxValue: new Date()
                }
            }, {
                //id: 'reasonforVisit',
                header: 'Reason for Visit (Condition)',
                dataIndex: 'reasonforVisit',
                menuDisabled: true,
                width: 250,
                editor: {
                    xtype: 'combobox',
                    queryMode: 'server',
                    store: aggregatedReasonForVisitStore,
                    valueField: 'reasonForVisitDescription',
                    displayField: 'reasonForVisitDescription',
                    triggerAction: 'all',
                    typeAhead: true
                }
            }, {
                //id: 'provider',
                header: 'Provider',
                dataIndex: 'provider',
                menuDisabled: true,
                width: 200,
                editor: {
                    xtype: 'combobox',
                    queryMode: 'server',
                    store: providerStore,
                    valueField: 'userEnteredProvider',
                    displayField: 'userEnteredProvider',
                    typeAhead: true
                }
            }, {
                //id: 'resultofVisit',
                header: 'Result of Visit',
                dataIndex: 'resultOfVisit',
                menuDisabled: true,
                width: 200,
                editor: {
                    xtype: 'combobox',
                    queryMode: 'server',
                    store: Ext.create('Ext.data.Store',{
                        autoLoad: true,
                        fields: [
                            {name: 'listitem'},
                            {name: 'listDescription'}
                        ],
                        proxy: {
                            type: 'ajax',
                            url: vResultOfVisitURL,
                            useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
                            reader: {
                                type: 'json',
                                root: 'response.dsListItems.listItems'
                            }
                        }
                    }),
                    valueField: 'listDescription',
                    displayField: 'listDescription',
                    triggerAction: 'all',
                    typeAhead: true
                }
            }, {
                //id: 'newPrescription',
                header: 'New Rx?',
                dataIndex: 'newPrescription',
                menuDisabled: true,
                width: 75,
                xtype: 'checkcolumn',
                editor: {
                    xtype: 'checkboxfield'
                }
            }, {
                //id: 'notes',
                header: 'Notes',
                dataIndex: 'notes',
                menuDisabled: true,
                width: 300,
                editor: {
                    xtype: 'textareafield'
                }
            }],
            selType: 'rowmodel',
            tbar: [{
                text: 'Add Visit',
                handler : function(){
                    rowEditing.cancelEdit();
                    // Create a model instance
                    var r = Ext.create('meridianportal.model.healthtracker.healthcarevisits', {
                        recipientID: meridianportal.utility.user.getSelectedRecipientID(),
                        sectionID: 1,
                        seqNum: "0",
                        dateOfVisit: Ext.Date.clearTime(new Date()),
                        reasonforVisit: 'Select reason for visit',
                        provider: 'Enter or select a provider',
                        resultOfVisit: 'Select result of visit',
                        newPrescription: false,
                        notes: 'Enter notes here...',
                        markDelete: false
                    });
                    store.insert(0, r);
                    rowEditing.startEdit(0,0);
                }
            }, '-',
                   {
                       itemId: 'editVisit',
                       text: 'Edit Visit',
                       handler: function(){
                           rowEditing.cancelEdit();
                           var sm = grid.getSelectionModel();
                           rowEditing.startEdit(sm.getSelection()[0], 0);
                       },
                       disabled: true
                   }, '-',
                   {
                       itemId: 'deleteVisit',
                       text: 'Delete Visit',
                       handler: function(){
                           var sel = grid.getSelectionModel().getSelection();
                           var model = sel[0];
                           var dov = model.get('dateOfVisit');
                           var vMonth = dov.getMonth() + 1;
                           model.set('markDelete', 'true');
                           var url = meridianportal.utility.Config.getRestURL() + meridianportal.utility.Config.getMemberAdapter() + "sethealthtrackerdata";
                           var standardhealthcareVisitRecord = '"recipientID":' + model.get('recipientID') +
                               ',"sectionID":' + model.get('sectionID') + ',"seqNum":' + model.get('seqNum') + ',"markDelete":' + model.get('markDelete');
                           var vitalshealthcareVisitRecord = '"dateOfVisit":' + '"' + vMonth + '-' + dov.getDate() + '-' + dov.getFullYear() + '"' + ',"reasonforVisit":' + '"' + model.get('reasonforVisit') + '"' +
                               ',"provider":' + '"' + model.get('provider') + '"' + ',"resultofVisit":' + '"' + model.get('resultOfVisit') + '"' +
                               ',"newPrescription":' + model.get('newPrescription') + ',"notes":' + '"' + model.get('notes') + '"';
                           var healthcareVisitRecord =  vitalshealthcareVisitRecord;
                           var healthcareVisitEncRec = Ext.JSON.encode(healthcareVisitRecord);
                           var dataObj = '{"request":{"pSessionID":"' +  meridianportal.utility.user.getSessionID() +
                               '","ttMemberHealthTrackerData":{"ttMemberHealthTrackerData":[{' + standardhealthcareVisitRecord + ',"VitalsData":"[{' +
                               healthcareVisitEncRec.replace(/(^"|"$)/g, '') + '}]"}]}}}';
                           Ext.Msg.show({
                               title: 'Delete?',
                               msg: 'Do you really want to delete the highlighted record?',
                               buttons: Ext.Msg.YESNO,
                               icon: Ext.Msg.QUESTION,
                               fn: function(buttonId){
                                   if (buttonId == 'yes'){
                                       //console.log('Visits Delete : ' + dataObj);
                                       Ext.Ajax.request({
                                           url: url,
                                           method: 'PUT',
                                           withCredentials: true,
                                           useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
                                           jsonData: dataObj,
                                           success: function(response, opts) {
                                               var obj = Ext.decode(response.responseText);
                                               //console.dir(obj);
                                               Ext.Msg.alert('Success', 'Successfully Deleted Visit Record!!&nbsp;', response.status + '&nbsp;');
                                               //ui changes after deletion
                                               rowEditing.cancelEdit();
                                               var sm = grid.getSelectionModel();
                                               store.remove(sm.getSelection());
                                               if (store.getCount() > 0){
                                                   sm.select(0);
                                               }
                                           },
                                           failure: function(response, opts) {
                                               //console.log('server-side failure with status code ' + response.statusText);
                                               Ext.Msg.alert('Error','An error occurred while deleting the Visit record.\nError Code:' + response.status + '&nbsp;');
                                           }
                                       });
                                   }
                               }
                           });
                       },
                       disabled: true
                   }],
            // paging bar on the bottom
            //bbar: Ext.create('Ext.PagingToolbar', {
            //    store: store,
            //    displayInfo: true,
            //    pageSize: 5,
            //    displayMsg: 'Displaying visits {0} - {1} of {2}',
            //    emptyMsg: "No visits to display",
            //    listeners: {
            //        beforechange: function(){
            //        }
            //    }
            //}),
            plugins: [rowEditing],
            listeners: {
                'selectionchange': function(view, records){
                    grid.down('#deleteVisit').setDisabled(!records.length);
                    grid.down('#editVisit').setDisabled(!records.length);
                }
            }
        });
        //calls set program API when user Add or Edit Visit.
        grid.on('edit', function(editor, e){
            var sel = grid.getSelectionModel().getSelection();
            var model = sel[0];
            var dov = model.get('dateOfVisit');
            var vitalshealthcareVisitRecord = null;
            var vMonth = null;
            if (model.get('seqNum') === "0"){
                vMonth = dov.getMonth() + 1;
                vitalshealthcareVisitRecord = '"dateOfVisit":' + '"' + vMonth + '-' + dov.getDate() + '-' + dov.getFullYear() + '"' + ',"reasonforVisit":' + '"' + model.get('reasonforVisit') + '"' +
                    ',"provider":' + '"' + model.get('provider') + '"' + ',"resultofVisit":' + '"' + model.get('resultOfVisit') + '"' +
                    ',"newPrescription":' + model.get('newPrescription') + ',"notes":' + '"' + model.get('notes') + '"';
            } else{
                vMonth = dov.getMonth() + 1;
                vitalshealthcareVisitRecord = '"dateOfVisit":' + '"' + vMonth + '-' + dov.getDate() + '-' + dov.getFullYear() + '"' + ',"reasonforVisit":' + '"' + model.get('reasonforVisit') + '"' +
                    ',"provider":' + '"' + model.get('provider') + '"' + ',"resultofVisit":' + '"' + model.get('resultOfVisit') + '"' +
                    ',"newPrescription":' + model.get('newPrescription') + ',"notes":' + '"' + model.get('notes') + '"';
            }
            var url = meridianportal.utility.Config.getRestURL() + meridianportal.utility.Config.getMemberAdapter() + "sethealthtrackerdata";

            var standardhealthcareVisitRecord = '"RecipientID":' + model.get('recipientID') +
                ',"SectionID":' + model.get('sectionID') + ',"seqNum":' + model.get('seqNum') + ',"markDelete":' + "false";

            var healthcareVisitRecord =  vitalshealthcareVisitRecord;
            var healthcareVisitEncRec = Ext.JSON.encode(healthcareVisitRecord);
            var dataObj = '{"request":{"pSessionID":"' +  meridianportal.utility.user.getSessionID() +
                '","ttMemberHealthTrackerData":{"ttMemberHealthTrackerData":[{' + standardhealthcareVisitRecord + ',"VitalsData":"[{' +
                healthcareVisitEncRec.replace(/(^"|"$)/g, '') + '}]"}]}}}';
            //console.log('Visits AddEdit : ' + dataObj);
            Ext.Ajax.request({
                url: url,
                method: 'PUT',
                withCredentials: true,
                useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
                jsonData: dataObj,
                success: function(response, opts) {
                    var obj = Ext.decode(response.responseText);
                    //console.dir(obj);
                    Ext.MessageBox.show({
                        title: 'Success',
                        msg: 'Successfully Saved Visit Records!!',
                        buttons: Ext.Msg.OK,
                        icon: Ext.MessageBox.INFO,
                        fn: function(buttonId){
                            if (buttonId == 'ok'){
                                if (model.get('newPrescription') === true){
                                    Ext.Msg.alert('New Medication', 'Please enter new medication in Medication and Supplement screen!&nbsp;' + '&nbsp;');
                                }
                            }
                        }
                    });
                    //Ext.Msg.alert('Success', 'Successfully Saved Visit Records!!&nbsp;', response.status + '&nbsp;');
                    store.sync();
                    //added below Ajax call as REST API is changed from QS to BODY plus seqNum is generated at server.
                    Ext.Ajax.request ({
                        url: vHealthCareVisitsURL,
                        method: 'PUT',
                        contentType: "application/json; charset=utf-8",
                        useDefaultXhrHeader: meridianportal.utility.Config.getUseDefaultXhrHeader(),
                        jsonData: getDataObject,
                        success: function(response, opts) {
                            var obj = Ext.decode(response.responseText);
                            store.loadData(obj.response.ttHndl.ttHealthCareVisit);
                        },
                        failure: function(response, opts) {
                            //console.log('server-side failure with status code ' + response.statusText);
                            Ext.Msg.alert('Error','An error occurred while reading the Visit record.\nError Code:' + response.status + '&nbsp;');
                        }
                    });
                },
                failure: function(response, opts) {
                    //console.log('server-side failure with status code ' + response.statusText);
                    Ext.Msg.alert('Visit Error','An error occurred while saving the Visit record.\nError Code:' + response.status + '&nbsp;');
                }
            });
            e.record.commit();
        });
        //calls this when user hits Cancel button during Add/Edit Visit
        grid.on('canceledit', function(editor, e){
            var sel = grid.getSelectionModel().getSelection();
            var model = sel[0];
            if (model.get('seqNum') === "0"){
                e.store.remove(e.record);
            }
        });
    }

});
