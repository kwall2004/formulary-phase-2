//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atlas.Reference.DAL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ReferenceEntities : DbContext
    {
        public ReferenceEntities()
            : base("name=ReferenceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AHFS> AHFS { get; set; }
        public virtual DbSet<AppSettings> AppSettings { get; set; }
        public virtual DbSet<CacheStatus> CacheStatus { get; set; }
        public virtual DbSet<DrugCatgRule> DrugCatgRule { get; set; }
        public virtual DbSet<DrugListCache> DrugListCache { get; set; }
        public virtual DbSet<DrugTypeFn> DrugTypeFn { get; set; }
        public virtual DbSet<ETC> ETC { get; set; }
        public virtual DbSet<FDBClinicalData> FDBClinicalData { get; set; }
        public virtual DbSet<FDBDrugChangeSummary> FDBDrugChangeSummary { get; set; }
        public virtual DbSet<FDBPatEdMstr> FDBPatEdMstr { get; set; }
        public virtual DbSet<FDBPECXRef> FDBPECXRef { get; set; }
        public virtual DbSet<FrmlryCacheStatus> FrmlryCacheStatus { get; set; }
        public virtual DbSet<FrmlryPendingFeed> FrmlryPendingFeed { get; set; }
        public virtual DbSet<FrmlryPlanType> FrmlryPlanType { get; set; }
        public virtual DbSet<FrmlryReview> FrmlryReview { get; set; }
        public virtual DbSet<GCN> GCN { get; set; }
        public virtual DbSet<MedispanBrandProb> MedispanBrandProb { get; set; }
        public virtual DbSet<MedispanBrandProbChangeList> MedispanBrandProbChangeList { get; set; }
        public virtual DbSet<MedispanDrugChangeSummary> MedispanDrugChangeSummary { get; set; }
        public virtual DbSet<MSDrugType> MSDrugType { get; set; }
        public virtual DbSet<NDCNote> NDCNote { get; set; }
        public virtual DbSet<NDCType> NDCType { get; set; }
        public virtual DbSet<NewDrugNotToDrugList> NewDrugNotToDrugList { get; set; }
        public virtual DbSet<NewDrugNotToFrmlry> NewDrugNotToFrmlry { get; set; }
        public virtual DbSet<NewDrugToDrugList> NewDrugToDrugList { get; set; }
        public virtual DbSet<NewDrugToFrmlry> NewDrugToFrmlry { get; set; }
        public virtual DbSet<PatEdMonoTextType> PatEdMonoTextType { get; set; }
        public virtual DbSet<PDFMessage> PDFMessage { get; set; }
        public virtual DbSet<RptFmt> RptFmt { get; set; }
        public virtual DbSet<RptFmtSection> RptFmtSection { get; set; }
        public virtual DbSet<SmartSearchField> SmartSearchField { get; set; }
        public virtual DbSet<SmartSearchGroup> SmartSearchGroup { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tmpCustomNDC> tmpCustomNDC { get; set; }
        public virtual DbSet<tmpUserDrugCatgPage> tmpUserDrugCatgPage { get; set; }
        public virtual DbSet<tmpUserDrugListDtlPage> tmpUserDrugListDtlPage { get; set; }
        public virtual DbSet<tmpUserDrugSearchMS> tmpUserDrugSearchMS { get; set; }
        public virtual DbSet<AHFSChangeList> AHFSChangeList { get; set; }
        public virtual DbSet<ETCChangeList> ETCChangeList { get; set; }
        public virtual DbSet<GCNChangeList> GCNChangeList { get; set; }
        public virtual DbSet<GPIChangeList> GPIChangeList { get; set; }
        public virtual DbSet<FileFmt> FileFmt { get; set; }
        public virtual DbSet<FontSize> FontSize { get; set; }
        public virtual DbSet<Lang> Lang { get; set; }
        public virtual DbSet<SumRptCfg> SumRptCfg { get; set; }
        public virtual DbSet<SumRptCfgCol> SumRptCfgCol { get; set; }
        public virtual DbSet<SumRptCfgCvrgPrptyType> SumRptCfgCvrgPrptyType { get; set; }
        public virtual DbSet<SumRptCfgSctn> SumRptCfgSctn { get; set; }
        public virtual DbSet<SumRptCfgTier> SumRptCfgTier { get; set; }
        public virtual DbSet<SumRptCol> SumRptCol { get; set; }
        public virtual DbSet<SumRptDrugSortBy> SumRptDrugSortBy { get; set; }
        public virtual DbSet<SumRptOrgBy> SumRptOrgBy { get; set; }
        public virtual DbSet<SumRptOTC> SumRptOTC { get; set; }
        public virtual DbSet<SumRptRollUp> SumRptRollUp { get; set; }
        public virtual DbSet<SumRptSctn> SumRptSctn { get; set; }
        public virtual DbSet<TierDispl> TierDispl { get; set; }
        public virtual DbSet<FormularyCache> FormularyCache { get; set; }
        public virtual DbSet<MedispanDrugList> MedispanDrugList { get; set; }
        public virtual DbSet<NSDEDrugChangeList> NSDEDrugChangeList { get; set; }
        public virtual DbSet<NSDEDrugList> NSDEDrugList { get; set; }
        public virtual DbSet<FDBDrugChangeList> FDBDrugChangeList { get; set; }
        public virtual DbSet<FrmlryPlanSubType> FrmlryPlanSubType { get; set; }
        public virtual DbSet<MedispanDrugChangeList> MedispanDrugChangeList { get; set; }
        public virtual DbSet<tmpUserDrugSearch> tmpUserDrugSearch { get; set; }
        public virtual DbSet<FDBDrugList> FDBDrugList { get; set; }
        public virtual DbSet<MedId> MedId { get; set; }
        public virtual DbSet<MedIdChangeList> MedIdChangeList { get; set; }
        public virtual DbSet<GPI> GPI { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
