//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Atlas.BenefitPlan.DAL.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BenefitPlanEntities : DbContext
    {
        public BenefitPlanEntities()
            : base("name=BenefitPlanEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessCtl> AccessCtl { get; set; }
        public virtual DbSet<Acct> Acct { get; set; }
        public virtual DbSet<AcctAddr> AcctAddr { get; set; }
        public virtual DbSet<AcctPayerID> AcctPayerID { get; set; }
        public virtual DbSet<AcctPCN> AcctPCN { get; set; }
        public virtual DbSet<AcctRXBIN> AcctRXBIN { get; set; }
        public virtual DbSet<Addr> Addr { get; set; }
        public virtual DbSet<AlwdPrescribersDtl> AlwdPrescribersDtl { get; set; }
        public virtual DbSet<AlwdPrescribersList> AlwdPrescribersList { get; set; }
        public virtual DbSet<Bnft> Bnft { get; set; }
        public virtual DbSet<BnftConfgPrpty> BnftConfgPrpty { get; set; }
        public virtual DbSet<BnftCrtriaSet> BnftCrtriaSet { get; set; }
        public virtual DbSet<BnftPlan> BnftPlan { get; set; }
        public virtual DbSet<BnftPlanAccessCtl> BnftPlanAccessCtl { get; set; }
        public virtual DbSet<BnftPlanBnft> BnftPlanBnft { get; set; }
        public virtual DbSet<BnftPlanBnftCvrgSetNtwrkTier> BnftPlanBnftCvrgSetNtwrkTier { get; set; }
        public virtual DbSet<BnftPlanConfgPrpty> BnftPlanConfgPrpty { get; set; }
        public virtual DbSet<BnftPlanConfgPrptyCrtriaSet> BnftPlanConfgPrptyCrtriaSet { get; set; }
        public virtual DbSet<BnftPlanPharmType> BnftPlanPharmType { get; set; }
        public virtual DbSet<BnftPlanPharmTypeDaySupl> BnftPlanPharmTypeDaySupl { get; set; }
        public virtual DbSet<BnftPlanSizeClsfcnType> BnftPlanSizeClsfcnType { get; set; }
        public virtual DbSet<BnftPlanType> BnftPlanType { get; set; }
        public virtual DbSet<BnftPlanWvrRider> BnftPlanWvrRider { get; set; }
        public virtual DbSet<BnftStat> BnftStat { get; set; }
        public virtual DbSet<BnftSvcType> BnftSvcType { get; set; }
        public virtual DbSet<CmmctnUsageType> CmmctnUsageType { get; set; }
        public virtual DbSet<CMSBnftStructType> CMSBnftStructType { get; set; }
        public virtual DbSet<Cntct> Cntct { get; set; }
        public virtual DbSet<CntctAcct> CntctAcct { get; set; }
        public virtual DbSet<CntctElctrncAddr> CntctElctrncAddr { get; set; }
        public virtual DbSet<CntctGrp> CntctGrp { get; set; }
        public virtual DbSet<CntctPopGrp> CntctPopGrp { get; set; }
        public virtual DbSet<CntctPstlAddr> CntctPstlAddr { get; set; }
        public virtual DbSet<CntctRespType> CntctRespType { get; set; }
        public virtual DbSet<CntctTelNbr> CntctTelNbr { get; set; }
        public virtual DbSet<CntctTenant> CntctTenant { get; set; }
        public virtual DbSet<CntctTenantFam> CntctTenantFam { get; set; }
        public virtual DbSet<CntctType> CntctType { get; set; }
        public virtual DbSet<CntyPstlCode> CntyPstlCode { get; set; }
        public virtual DbSet<ConfgPrptyCatgType> ConfgPrptyCatgType { get; set; }
        public virtual DbSet<ConfgPrptyOpt> ConfgPrptyOpt { get; set; }
        public virtual DbSet<ConfgPrptyType> ConfgPrptyType { get; set; }
        public virtual DbSet<CopayCoinsuranceLogicType> CopayCoinsuranceLogicType { get; set; }
        public virtual DbSet<CopayDist> CopayDist { get; set; }
        public virtual DbSet<CopayFuncType> CopayFuncType { get; set; }
        public virtual DbSet<CopayOvrrd> CopayOvrrd { get; set; }
        public virtual DbSet<CopayOvrrdQulfrType> CopayOvrrdQulfrType { get; set; }
        public virtual DbSet<CopaySetup> CopaySetup { get; set; }
        public virtual DbSet<CostBasisType> CostBasisType { get; set; }
        public virtual DbSet<CrtriaCondType> CrtriaCondType { get; set; }
        public virtual DbSet<CrtriaDtl> CrtriaDtl { get; set; }
        public virtual DbSet<CrtriaOperType> CrtriaOperType { get; set; }
        public virtual DbSet<CrtriaSet> CrtriaSet { get; set; }
        public virtual DbSet<CrtriaSetType> CrtriaSetType { get; set; }
        public virtual DbSet<CvrgPhase> CvrgPhase { get; set; }
        public virtual DbSet<CvrgPhaseType> CvrgPhaseType { get; set; }
        public virtual DbSet<CvrgSet> CvrgSet { get; set; }
        public virtual DbSet<CvrgSetCrtriaSet> CvrgSetCrtriaSet { get; set; }
        public virtual DbSet<CvrgSetThreshold> CvrgSetThreshold { get; set; }
        public virtual DbSet<DataCompareDtl> DataCompareDtl { get; set; }
        public virtual DbSet<DataCompareHdr> DataCompareHdr { get; set; }
        public virtual DbSet<DataCompareMsg> DataCompareMsg { get; set; }
        public virtual DbSet<DAWCopay> DAWCopay { get; set; }
        public virtual DbSet<DAWType> DAWType { get; set; }
        public virtual DbSet<DaySuplType> DaySuplType { get; set; }
        public virtual DbSet<Deducbl> Deducbl { get; set; }
        public virtual DbSet<DeducblEpsd> DeducblEpsd { get; set; }
        public virtual DbSet<DeducblExcl> DeducblExcl { get; set; }
        public virtual DbSet<DeducblExclQulfrType> DeducblExclQulfrType { get; set; }
        public virtual DbSet<DeducblScopeType> DeducblScopeType { get; set; }
        public virtual DbSet<DeducblType> DeducblType { get; set; }
        public virtual DbSet<DrugBrandType> DrugBrandType { get; set; }
        public virtual DbSet<DrugClsType> DrugClsType { get; set; }
        public virtual DbSet<DrugRefDb> DrugRefDb { get; set; }
        public virtual DbSet<EarlyRefillExcp> EarlyRefillExcp { get; set; }
        public virtual DbSet<EarlyRefillExcpQulfrType> EarlyRefillExcpQulfrType { get; set; }
        public virtual DbSet<FillExcp> FillExcp { get; set; }
        public virtual DbSet<FillExcpChngQulfrType> FillExcpChngQulfrType { get; set; }
        public virtual DbSet<FIPSCntyCode> FIPSCntyCode { get; set; }
        public virtual DbSet<FreqQulfrType> FreqQulfrType { get; set; }
        public virtual DbSet<Frmlry> Frmlry { get; set; }
        public virtual DbSet<FrmlryTier> FrmlryTier { get; set; }
        public virtual DbSet<FrmlryTierName> FrmlryTierName { get; set; }
        public virtual DbSet<Grp> Grp { get; set; }
        public virtual DbSet<GrpAddr> GrpAddr { get; set; }
        public virtual DbSet<HealthcareFinclAcctType> HealthcareFinclAcctType { get; set; }
        public virtual DbSet<ISOCntryCode> ISOCntryCode { get; set; }
        public virtual DbSet<LICSSetup> LICSSetup { get; set; }
        public virtual DbSet<LICSType> LICSType { get; set; }
        public virtual DbSet<ListCrosswalk> ListCrosswalk { get; set; }
        public virtual DbSet<ListDtl> ListDtl { get; set; }
        public virtual DbSet<ListMstr> ListMstr { get; set; }
        public virtual DbSet<ListSrc> ListSrc { get; set; }
        public virtual DbSet<ListType> ListType { get; set; }
        public virtual DbSet<LOB> LOB { get; set; }
        public virtual DbSet<MACList> MACList { get; set; }
        public virtual DbSet<Ntwrk> Ntwrk { get; set; }
        public virtual DbSet<NtwrkBnftPlanType> NtwrkBnftPlanType { get; set; }
        public virtual DbSet<NtwrkNtwrkTier> NtwrkNtwrkTier { get; set; }
        public virtual DbSet<NtwrkTier> NtwrkTier { get; set; }
        public virtual DbSet<NtwrkTierType> NtwrkTierType { get; set; }
        public virtual DbSet<PayerID> PayerID { get; set; }
        public virtual DbSet<PBP> PBP { get; set; }
        public virtual DbSet<PBPBnftPlan> PBPBnftPlan { get; set; }
        public virtual DbSet<PBPBnftPlanConfgPrpty> PBPBnftPlanConfgPrpty { get; set; }
        public virtual DbSet<PBPConfgPrpty> PBPConfgPrpty { get; set; }
        public virtual DbSet<PCN> PCN { get; set; }
        public virtual DbSet<PharmType> PharmType { get; set; }
        public virtual DbSet<PlanCapLim> PlanCapLim { get; set; }
        public virtual DbSet<PlanCapLimPerQulfrType> PlanCapLimPerQulfrType { get; set; }
        public virtual DbSet<PlanCapLimQulfrType> PlanCapLimQulfrType { get; set; }
        public virtual DbSet<PlanClsfcnType> PlanClsfcnType { get; set; }
        public virtual DbSet<PlanPrcg> PlanPrcg { get; set; }
        public virtual DbSet<PopGrp> PopGrp { get; set; }
        public virtual DbSet<PopGrpAddr> PopGrpAddr { get; set; }
        public virtual DbSet<PopGrpBnftPlan> PopGrpBnftPlan { get; set; }
        public virtual DbSet<PopGrpBnftPlanConfgPrpty> PopGrpBnftPlanConfgPrpty { get; set; }
        public virtual DbSet<PopGrpBnftPlanPkgConfgPrpty> PopGrpBnftPlanPkgConfgPrpty { get; set; }
        public virtual DbSet<PopGrpPBP> PopGrpPBP { get; set; }
        public virtual DbSet<PopGrpPBPHealthcareFinclAcct> PopGrpPBPHealthcareFinclAcct { get; set; }
        public virtual DbSet<PopGrpPBPStat> PopGrpPBPStat { get; set; }
        public virtual DbSet<PrdctType> PrdctType { get; set; }
        public virtual DbSet<Prescbr> Prescbr { get; set; }
        public virtual DbSet<PrescbrDrugOvrrdDtl> PrescbrDrugOvrrdDtl { get; set; }
        public virtual DbSet<PrescbrDrugOvrrdList> PrescbrDrugOvrrdList { get; set; }
        public virtual DbSet<PstlCode> PstlCode { get; set; }
        public virtual DbSet<PymtPrfl> PymtPrfl { get; set; }
        public virtual DbSet<PymtPrflDtl> PymtPrflDtl { get; set; }
        public virtual DbSet<RXBIN> RXBIN { get; set; }
        public virtual DbSet<RxPrcgType> RxPrcgType { get; set; }
        public virtual DbSet<StatNote> StatNote { get; set; }
        public virtual DbSet<StatType> StatType { get; set; }
        public virtual DbSet<StPrvncCode> StPrvncCode { get; set; }
        public virtual DbSet<SvcArea> SvcArea { get; set; }
        public virtual DbSet<SvcAreaCntryCode> SvcAreaCntryCode { get; set; }
        public virtual DbSet<SvcAreaCntyCode> SvcAreaCntyCode { get; set; }
        public virtual DbSet<SvcAreaPstlCode> SvcAreaPstlCode { get; set; }
        public virtual DbSet<SvcAreaStPrvncCode> SvcAreaStPrvncCode { get; set; }
        public virtual DbSet<SvcType> SvcType { get; set; }
        public virtual DbSet<Tenant> Tenant { get; set; }
        public virtual DbSet<TenantAddr> TenantAddr { get; set; }
        public virtual DbSet<TenantFam> TenantFam { get; set; }
        public virtual DbSet<TenantFamAddr> TenantFamAddr { get; set; }
        public virtual DbSet<TenantPayerID> TenantPayerID { get; set; }
        public virtual DbSet<TenantPCN> TenantPCN { get; set; }
        public virtual DbSet<TenantRXBIN> TenantRXBIN { get; set; }
        public virtual DbSet<TenantTaxnmy> TenantTaxnmy { get; set; }
        public virtual DbSet<Threshold> Threshold { get; set; }
        public virtual DbSet<ThresholdQulfrType> ThresholdQulfrType { get; set; }
        public virtual DbSet<UserGrp> UserGrp { get; set; }
        public virtual DbSet<UserGrpType> UserGrpType { get; set; }
        public virtual DbSet<ValQulfrType> ValQulfrType { get; set; }
        public virtual DbSet<WvrRiderType> WvrRiderType { get; set; }
        public virtual DbSet<vwCurrentPopGrpPBPStat> vwCurrentPopGrpPBPStat { get; set; }
    
        public virtual ObjectResult<spAccountTenantIndustryIdentifier_Result> spAccountTenantIndustryIdentifier(Nullable<long> acctSK)
        {
            var acctSKParameter = acctSK.HasValue ?
                new ObjectParameter("AcctSK", acctSK) :
                new ObjectParameter("AcctSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAccountTenantIndustryIdentifier_Result>("spAccountTenantIndustryIdentifier", acctSKParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> spBenefitCopyDefinition(Nullable<long> origBnftSK, string currentUser)
        {
            var origBnftSKParameter = origBnftSK.HasValue ?
                new ObjectParameter("OrigBnftSK", origBnftSK) :
                new ObjectParameter("OrigBnftSK", typeof(long));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("spBenefitCopyDefinition", origBnftSKParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<spBenefitDefinitionSearch_Result> spBenefitDefinitionSearch(string bnftName, string bnftCode, Nullable<long> svcTypeSK, Nullable<System.DateTimeOffset> efctvStartDt, Nullable<System.DateTimeOffset> efctvEndDt)
        {
            var bnftNameParameter = bnftName != null ?
                new ObjectParameter("BnftName", bnftName) :
                new ObjectParameter("BnftName", typeof(string));
    
            var bnftCodeParameter = bnftCode != null ?
                new ObjectParameter("BnftCode", bnftCode) :
                new ObjectParameter("BnftCode", typeof(string));
    
            var svcTypeSKParameter = svcTypeSK.HasValue ?
                new ObjectParameter("SvcTypeSK", svcTypeSK) :
                new ObjectParameter("SvcTypeSK", typeof(long));
    
            var efctvStartDtParameter = efctvStartDt.HasValue ?
                new ObjectParameter("EfctvStartDt", efctvStartDt) :
                new ObjectParameter("EfctvStartDt", typeof(System.DateTimeOffset));
    
            var efctvEndDtParameter = efctvEndDt.HasValue ?
                new ObjectParameter("EfctvEndDt", efctvEndDt) :
                new ObjectParameter("EfctvEndDt", typeof(System.DateTimeOffset));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBenefitDefinitionSearch_Result>("spBenefitDefinitionSearch", bnftNameParameter, bnftCodeParameter, svcTypeSKParameter, efctvStartDtParameter, efctvEndDtParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> spBenefitPlanDeepCopy(Nullable<long> bnftplanToCopySK, string currentUser)
        {
            var bnftplanToCopySKParameter = bnftplanToCopySK.HasValue ?
                new ObjectParameter("bnftplanToCopySK", bnftplanToCopySK) :
                new ObjectParameter("bnftplanToCopySK", typeof(long));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("spBenefitPlanDeepCopy", bnftplanToCopySKParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<spBenefitPlanSearch_Result> spBenefitPlanSearch(Nullable<long> bnftPlanSK, Nullable<long> lOBSK, Nullable<long> pBPSK, Nullable<long> bnftPlanTypeSK, Nullable<bool> tmpltInd, Nullable<System.DateTime> efctvStartDt, Nullable<System.DateTime> efctvEndDt)
        {
            var bnftPlanSKParameter = bnftPlanSK.HasValue ?
                new ObjectParameter("BnftPlanSK", bnftPlanSK) :
                new ObjectParameter("BnftPlanSK", typeof(long));
    
            var lOBSKParameter = lOBSK.HasValue ?
                new ObjectParameter("LOBSK", lOBSK) :
                new ObjectParameter("LOBSK", typeof(long));
    
            var pBPSKParameter = pBPSK.HasValue ?
                new ObjectParameter("PBPSK", pBPSK) :
                new ObjectParameter("PBPSK", typeof(long));
    
            var bnftPlanTypeSKParameter = bnftPlanTypeSK.HasValue ?
                new ObjectParameter("BnftPlanTypeSK", bnftPlanTypeSK) :
                new ObjectParameter("BnftPlanTypeSK", typeof(long));
    
            var tmpltIndParameter = tmpltInd.HasValue ?
                new ObjectParameter("TmpltInd", tmpltInd) :
                new ObjectParameter("TmpltInd", typeof(bool));
    
            var efctvStartDtParameter = efctvStartDt.HasValue ?
                new ObjectParameter("EfctvStartDt", efctvStartDt) :
                new ObjectParameter("EfctvStartDt", typeof(System.DateTime));
    
            var efctvEndDtParameter = efctvEndDt.HasValue ?
                new ObjectParameter("EfctvEndDt", efctvEndDt) :
                new ObjectParameter("EfctvEndDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBenefitPlanSearch_Result>("spBenefitPlanSearch", bnftPlanSKParameter, lOBSKParameter, pBPSKParameter, bnftPlanTypeSKParameter, tmpltIndParameter, efctvStartDtParameter, efctvEndDtParameter);
        }
    
        public virtual ObjectResult<spBenefitPlanSearchByText_Result> spBenefitPlanSearchByText(string bnftPlanName, Nullable<long> lOBSK, Nullable<long> pBPSK, Nullable<long> bnftPlanTypeSK, Nullable<bool> tmpltInd, Nullable<System.DateTime> efctvStartDt, Nullable<System.DateTime> efctvEndDt)
        {
            var bnftPlanNameParameter = bnftPlanName != null ?
                new ObjectParameter("BnftPlanName", bnftPlanName) :
                new ObjectParameter("BnftPlanName", typeof(string));
    
            var lOBSKParameter = lOBSK.HasValue ?
                new ObjectParameter("LOBSK", lOBSK) :
                new ObjectParameter("LOBSK", typeof(long));
    
            var pBPSKParameter = pBPSK.HasValue ?
                new ObjectParameter("PBPSK", pBPSK) :
                new ObjectParameter("PBPSK", typeof(long));
    
            var bnftPlanTypeSKParameter = bnftPlanTypeSK.HasValue ?
                new ObjectParameter("BnftPlanTypeSK", bnftPlanTypeSK) :
                new ObjectParameter("BnftPlanTypeSK", typeof(long));
    
            var tmpltIndParameter = tmpltInd.HasValue ?
                new ObjectParameter("TmpltInd", tmpltInd) :
                new ObjectParameter("TmpltInd", typeof(bool));
    
            var efctvStartDtParameter = efctvStartDt.HasValue ?
                new ObjectParameter("EfctvStartDt", efctvStartDt) :
                new ObjectParameter("EfctvStartDt", typeof(System.DateTime));
    
            var efctvEndDtParameter = efctvEndDt.HasValue ?
                new ObjectParameter("EfctvEndDt", efctvEndDt) :
                new ObjectParameter("EfctvEndDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spBenefitPlanSearchByText_Result>("spBenefitPlanSearchByText", bnftPlanNameParameter, lOBSKParameter, pBPSKParameter, bnftPlanTypeSKParameter, tmpltIndParameter, efctvStartDtParameter, efctvEndDtParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spCopaySetupCopy(Nullable<long> bnftplanSK, Nullable<long> sourcePharmTypeSK, string destinationPharmTypes, Nullable<long> sourceNetworkTierSK, Nullable<long> destinationNetworkTierSK, Nullable<bool> overwriteDuplicatesInd, string user)
        {
            var bnftplanSKParameter = bnftplanSK.HasValue ?
                new ObjectParameter("bnftplanSK", bnftplanSK) :
                new ObjectParameter("bnftplanSK", typeof(long));
    
            var sourcePharmTypeSKParameter = sourcePharmTypeSK.HasValue ?
                new ObjectParameter("sourcePharmTypeSK", sourcePharmTypeSK) :
                new ObjectParameter("sourcePharmTypeSK", typeof(long));
    
            var destinationPharmTypesParameter = destinationPharmTypes != null ?
                new ObjectParameter("destinationPharmTypes", destinationPharmTypes) :
                new ObjectParameter("destinationPharmTypes", typeof(string));
    
            var sourceNetworkTierSKParameter = sourceNetworkTierSK.HasValue ?
                new ObjectParameter("sourceNetworkTierSK", sourceNetworkTierSK) :
                new ObjectParameter("sourceNetworkTierSK", typeof(long));
    
            var destinationNetworkTierSKParameter = destinationNetworkTierSK.HasValue ?
                new ObjectParameter("destinationNetworkTierSK", destinationNetworkTierSK) :
                new ObjectParameter("destinationNetworkTierSK", typeof(long));
    
            var overwriteDuplicatesIndParameter = overwriteDuplicatesInd.HasValue ?
                new ObjectParameter("overwriteDuplicatesInd", overwriteDuplicatesInd) :
                new ObjectParameter("overwriteDuplicatesInd", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spCopaySetupCopy", bnftplanSKParameter, sourcePharmTypeSKParameter, destinationPharmTypesParameter, sourceNetworkTierSKParameter, destinationNetworkTierSKParameter, overwriteDuplicatesIndParameter, userParameter);
        }
    
        public virtual int spFormularyTierDelete(Nullable<long> frmlryTierSK, string currentUser)
        {
            var frmlryTierSKParameter = frmlryTierSK.HasValue ?
                new ObjectParameter("FrmlryTierSK", frmlryTierSK) :
                new ObjectParameter("FrmlryTierSK", typeof(long));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spFormularyTierDelete", frmlryTierSKParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<spGetPopulationGroupPBPList_Result> spGetPopulationGroupPBPList(Nullable<long> popGrpSK)
        {
            var popGrpSKParameter = popGrpSK.HasValue ?
                new ObjectParameter("PopGrpSK", popGrpSK) :
                new ObjectParameter("PopGrpSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetPopulationGroupPBPList_Result>("spGetPopulationGroupPBPList", popGrpSKParameter);
        }
    
        public virtual int spGroupCopyContents(string jSON)
        {
            var jSONParameter = jSON != null ?
                new ObjectParameter("JSON", jSON) :
                new ObjectParameter("JSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGroupCopyContents", jSONParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spLICSSetupCopy(Nullable<long> bnftplanSK, Nullable<long> sourceLICSTypeSK, string destinationLICSTypes, Nullable<long> sourcePharmTypeSK, string destinationPharmTypes, Nullable<bool> overwriteDuplicatesInd, string user)
        {
            var bnftplanSKParameter = bnftplanSK.HasValue ?
                new ObjectParameter("bnftplanSK", bnftplanSK) :
                new ObjectParameter("bnftplanSK", typeof(long));
    
            var sourceLICSTypeSKParameter = sourceLICSTypeSK.HasValue ?
                new ObjectParameter("sourceLICSTypeSK", sourceLICSTypeSK) :
                new ObjectParameter("sourceLICSTypeSK", typeof(long));
    
            var destinationLICSTypesParameter = destinationLICSTypes != null ?
                new ObjectParameter("destinationLICSTypes", destinationLICSTypes) :
                new ObjectParameter("destinationLICSTypes", typeof(string));
    
            var sourcePharmTypeSKParameter = sourcePharmTypeSK.HasValue ?
                new ObjectParameter("sourcePharmTypeSK", sourcePharmTypeSK) :
                new ObjectParameter("sourcePharmTypeSK", typeof(long));
    
            var destinationPharmTypesParameter = destinationPharmTypes != null ?
                new ObjectParameter("destinationPharmTypes", destinationPharmTypes) :
                new ObjectParameter("destinationPharmTypes", typeof(string));
    
            var overwriteDuplicatesIndParameter = overwriteDuplicatesInd.HasValue ?
                new ObjectParameter("overwriteDuplicatesInd", overwriteDuplicatesInd) :
                new ObjectParameter("overwriteDuplicatesInd", typeof(bool));
    
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spLICSSetupCopy", bnftplanSKParameter, sourceLICSTypeSKParameter, destinationLICSTypesParameter, sourcePharmTypeSKParameter, destinationPharmTypesParameter, overwriteDuplicatesIndParameter, userParameter);
        }
    
        public virtual int spNetworkTierDelete(Nullable<long> ntwrkTierSK, string currentUser)
        {
            var ntwrkTierSKParameter = ntwrkTierSK.HasValue ?
                new ObjectParameter("NtwrkTierSK", ntwrkTierSK) :
                new ObjectParameter("NtwrkTierSK", typeof(long));
    
            var currentUserParameter = currentUser != null ?
                new ObjectParameter("CurrentUser", currentUser) :
                new ObjectParameter("CurrentUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spNetworkTierDelete", ntwrkTierSKParameter, currentUserParameter);
        }
    
        public virtual ObjectResult<spPlanBenefitPackageSearch_Result> spPlanBenefitPackageSearch(Nullable<long> pBPSK, Nullable<long> lOBSK, Nullable<long> bnftPlanTypeSK, string tenantFamName, string tenantName, string acctName, string grpName, string popGrpName, Nullable<System.DateTime> efctvStartDt, Nullable<System.DateTime> efctvEndDt)
        {
            var pBPSKParameter = pBPSK.HasValue ?
                new ObjectParameter("PBPSK", pBPSK) :
                new ObjectParameter("PBPSK", typeof(long));
    
            var lOBSKParameter = lOBSK.HasValue ?
                new ObjectParameter("LOBSK", lOBSK) :
                new ObjectParameter("LOBSK", typeof(long));
    
            var bnftPlanTypeSKParameter = bnftPlanTypeSK.HasValue ?
                new ObjectParameter("BnftPlanTypeSK", bnftPlanTypeSK) :
                new ObjectParameter("BnftPlanTypeSK", typeof(long));
    
            var tenantFamNameParameter = tenantFamName != null ?
                new ObjectParameter("TenantFamName", tenantFamName) :
                new ObjectParameter("TenantFamName", typeof(string));
    
            var tenantNameParameter = tenantName != null ?
                new ObjectParameter("TenantName", tenantName) :
                new ObjectParameter("TenantName", typeof(string));
    
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            var grpNameParameter = grpName != null ?
                new ObjectParameter("GrpName", grpName) :
                new ObjectParameter("GrpName", typeof(string));
    
            var popGrpNameParameter = popGrpName != null ?
                new ObjectParameter("PopGrpName", popGrpName) :
                new ObjectParameter("PopGrpName", typeof(string));
    
            var efctvStartDtParameter = efctvStartDt.HasValue ?
                new ObjectParameter("EfctvStartDt", efctvStartDt) :
                new ObjectParameter("EfctvStartDt", typeof(System.DateTime));
    
            var efctvEndDtParameter = efctvEndDt.HasValue ?
                new ObjectParameter("EfctvEndDt", efctvEndDt) :
                new ObjectParameter("EfctvEndDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPlanBenefitPackageSearch_Result>("spPlanBenefitPackageSearch", pBPSKParameter, lOBSKParameter, bnftPlanTypeSKParameter, tenantFamNameParameter, tenantNameParameter, acctNameParameter, grpNameParameter, popGrpNameParameter, efctvStartDtParameter, efctvEndDtParameter);
        }
    
        public virtual ObjectResult<spPlanBenefitPackageSearchByText_Result> spPlanBenefitPackageSearchByText(string pBPName, Nullable<long> lOBSK, Nullable<long> bnftPlanTypeSK, string tenantFamName, string tenantName, string acctName, string grpName, string popGrpName, Nullable<System.DateTime> efctvStartDt, Nullable<System.DateTime> efctvEndDt)
        {
            var pBPNameParameter = pBPName != null ?
                new ObjectParameter("PBPName", pBPName) :
                new ObjectParameter("PBPName", typeof(string));
    
            var lOBSKParameter = lOBSK.HasValue ?
                new ObjectParameter("LOBSK", lOBSK) :
                new ObjectParameter("LOBSK", typeof(long));
    
            var bnftPlanTypeSKParameter = bnftPlanTypeSK.HasValue ?
                new ObjectParameter("BnftPlanTypeSK", bnftPlanTypeSK) :
                new ObjectParameter("BnftPlanTypeSK", typeof(long));
    
            var tenantFamNameParameter = tenantFamName != null ?
                new ObjectParameter("TenantFamName", tenantFamName) :
                new ObjectParameter("TenantFamName", typeof(string));
    
            var tenantNameParameter = tenantName != null ?
                new ObjectParameter("TenantName", tenantName) :
                new ObjectParameter("TenantName", typeof(string));
    
            var acctNameParameter = acctName != null ?
                new ObjectParameter("AcctName", acctName) :
                new ObjectParameter("AcctName", typeof(string));
    
            var grpNameParameter = grpName != null ?
                new ObjectParameter("GrpName", grpName) :
                new ObjectParameter("GrpName", typeof(string));
    
            var popGrpNameParameter = popGrpName != null ?
                new ObjectParameter("PopGrpName", popGrpName) :
                new ObjectParameter("PopGrpName", typeof(string));
    
            var efctvStartDtParameter = efctvStartDt.HasValue ?
                new ObjectParameter("EfctvStartDt", efctvStartDt) :
                new ObjectParameter("EfctvStartDt", typeof(System.DateTime));
    
            var efctvEndDtParameter = efctvEndDt.HasValue ?
                new ObjectParameter("EfctvEndDt", efctvEndDt) :
                new ObjectParameter("EfctvEndDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPlanBenefitPackageSearchByText_Result>("spPlanBenefitPackageSearchByText", pBPNameParameter, lOBSKParameter, bnftPlanTypeSKParameter, tenantFamNameParameter, tenantNameParameter, acctNameParameter, grpNameParameter, popGrpNameParameter, efctvStartDtParameter, efctvEndDtParameter);
        }
    
        public virtual ObjectResult<spPopGrpBnftPkgWorkflow_Result> spPopGrpBnftPkgWorkflow(Nullable<long> statType, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var statTypeParameter = statType.HasValue ?
                new ObjectParameter("statType", statType) :
                new ObjectParameter("statType", typeof(long));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPopGrpBnftPkgWorkflow_Result>("spPopGrpBnftPkgWorkflow", statTypeParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<spSvcAreaHierarchyGetBySvcAreaSK_Result> spSvcAreaHierarchyGetBySvcAreaSK(Nullable<long> svcAreaSK)
        {
            var svcAreaSKParameter = svcAreaSK.HasValue ?
                new ObjectParameter("SvcAreaSK", svcAreaSK) :
                new ObjectParameter("SvcAreaSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSvcAreaHierarchyGetBySvcAreaSK_Result>("spSvcAreaHierarchyGetBySvcAreaSK", svcAreaSKParameter);
        }
    
        public virtual ObjectResult<TenantHierarchySearch_Result> spTenantHierarchyAdvancedSearch(string searchField, string searchText)
        {
            var searchFieldParameter = searchField != null ?
                new ObjectParameter("SearchField", searchField) :
                new ObjectParameter("SearchField", typeof(string));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TenantHierarchySearch_Result>("spTenantHierarchyAdvancedSearch", searchFieldParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<TenantHierarchySearch_Result> spTenantHierarchySearch(string searchText)
        {
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TenantHierarchySearch_Result>("spTenantHierarchySearch", searchTextParameter);
        }
    
        public virtual ObjectResult<spTenantTenantIndustryIdentifier_Result> spTenantTenantIndustryIdentifier(Nullable<long> tenantSK)
        {
            var tenantSKParameter = tenantSK.HasValue ?
                new ObjectParameter("TenantSK", tenantSK) :
                new ObjectParameter("TenantSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTenantTenantIndustryIdentifier_Result>("spTenantTenantIndustryIdentifier", tenantSKParameter);
        }
    
        public virtual ObjectResult<spViewExistingBenefits_Result> spViewExistingBenefits(Nullable<long> bnftPlanSK)
        {
            var bnftPlanSKParameter = bnftPlanSK.HasValue ?
                new ObjectParameter("BnftPlanSK", bnftPlanSK) :
                new ObjectParameter("BnftPlanSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewExistingBenefits_Result>("spViewExistingBenefits", bnftPlanSKParameter);
        }
    
        public virtual ObjectResult<spViewExistingBenefitsWithRules_Result> spViewExistingBenefitsWithRules(Nullable<long> bnftPlanSK)
        {
            var bnftPlanSKParameter = bnftPlanSK.HasValue ?
                new ObjectParameter("BnftPlanSK", bnftPlanSK) :
                new ObjectParameter("BnftPlanSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spViewExistingBenefitsWithRules_Result>("spViewExistingBenefitsWithRules", bnftPlanSKParameter);
        }
    
        public virtual ObjectResult<string> spIntegrate_MCS_Create_Benefit_XML(string status)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spIntegrate_MCS_Create_Benefit_XML", statusParameter);
        }
    
        public virtual ObjectResult<string> spIntegrate_MCS_XMLFile(Nullable<long> bnftPlanSK, Nullable<long> popgrpPBPSK)
        {
            var bnftPlanSKParameter = bnftPlanSK.HasValue ?
                new ObjectParameter("bnftPlanSK", bnftPlanSK) :
                new ObjectParameter("bnftPlanSK", typeof(long));
    
            var popgrpPBPSKParameter = popgrpPBPSK.HasValue ?
                new ObjectParameter("PopgrpPBPSK", popgrpPBPSK) :
                new ObjectParameter("PopgrpPBPSK", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spIntegrate_MCS_XMLFile", bnftPlanSKParameter, popgrpPBPSKParameter);
        }
    
        public virtual ObjectResult<string> spIntegrate_Merlin_XMLFile(Nullable<long> bnftplanSK, string planPgmCode)
        {
            var bnftplanSKParameter = bnftplanSK.HasValue ?
                new ObjectParameter("bnftplanSK", bnftplanSK) :
                new ObjectParameter("bnftplanSK", typeof(long));
    
            var planPgmCodeParameter = planPgmCode != null ?
                new ObjectParameter("PlanPgmCode", planPgmCode) :
                new ObjectParameter("PlanPgmCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spIntegrate_Merlin_XMLFile", bnftplanSKParameter, planPgmCodeParameter);
        }
    }
}
